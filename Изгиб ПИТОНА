import pygame
import random

# Настройки экрана и игрового поля
SCREEN_WIDTH = 640
SCREEN_HEIGHT = 480
GRID_SIZE = 20  # Размер клетки

# Цвета
BACKGROUND_COLOR = (0, 0, 0)
SNAKE_COLOR = (0, 255, 0)
APPLE_COLOR = (255, 0, 0)

class GameObject:
    """
    Базовый класс для всех объектов игры.
    """
    def __init__(self, x, y, body_color):
        self.position = (x, y)
        self.body_color = body_color

    def draw(self, screen):
        """
        Отрисовывает объект на экране.
        """
        pygame.draw.rect(screen, self.body_color, pygame.Rect(self.position[0], self.position[1], GRID_SIZE, GRID_SIZE))


class Apple(GameObject):
    """
    Класс для яблока.
    """
    def __init__(self):
        # Сначала случайным образом генерируем координаты яблока
        self.randomize_position()

    def randomize_position(self):
        """
        Генерирует случайную позицию яблока.
        """
        self.position = (random.randint(0, (SCREEN_WIDTH // GRID_SIZE) - 1) * GRID_SIZE,
                         random.randint(0, (SCREEN_HEIGHT // GRID_SIZE) - 1) * GRID_SIZE)

    def draw(self, screen):
        """
        Отрисовывает яблоко на экране.
        """
        super().draw(screen)


class Snake(GameObject):
    """
    Класс для змейки.
    """
    def __init__(self):
        # Изначальная позиция змейки - в центре экрана
        self.length = 1
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]
        self.direction = (GRID_SIZE, 0)  # Направление - вправо
        self.next_direction = None
        self.body_color = SNAKE_COLOR
        self.last = None

    def get_head_position(self):
        """
        Возвращает позицию головы змейки.
        """
        return self.positions[0]

    def update_direction(self, direction):
        """
        Обновляет направление движения змейки.
        """
        if direction == 'UP':
            self.next_direction = (0, -GRID_SIZE)
        elif direction == 'DOWN':
            self.next_direction = (0, GRID_SIZE)
        elif direction == 'LEFT':
            self.next_direction = (-GRID_SIZE, 0)
        elif direction == 'RIGHT':
            self.next_direction = (GRID_SIZE, 0)

    def move(self):
        """
        Обновляет позицию змейки, добавляя новую голову и удаляя хвост.
        """
        if self.next_direction:
            self.direction = self.next_direction

        new_head = (self.get_head_position()[0] + self.direction[0], self.get_head_position()[1] + self.direction[1])
        self.positions.insert(0, new_head)

        if len(self.positions) > self.length:
            self.last = self.positions.pop()  # Удаляем последний сегмент

        # Обрабатываем столкновения со стенами
        head_x, head_y = self.get_head_position()
        if head_x >= SCREEN_WIDTH or head_x < 0 or head_y >= SCREEN_HEIGHT or head_y < 0:
            self.reset()

        # Проверка на столкновение с собой
        if self.get_head_position() in self.positions[1:]:
            self.reset()

    def reset(self):
        """
        Сбрасывает состояние змейки.
        """
        self.length = 1
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]
        self.direction = (GRID_SIZE, 0)
        self.next_direction = None

    def draw(self, screen):
        """
        Отрисовывает змейку на экране.
        """
        for segment in self.positions:
            pygame.draw.rect(screen, self.body_color, pygame.Rect(segment[0], segment[1], GRID_SIZE, GRID_SIZE))

    def eat(self):
        """
        Увеличивает длину змейки, когда она съедает яблоко.
        """
        self.length += 1


def handle_keys():
    """
    Обрабатывает нажатия клавиш для изменения направления змейки.
    """
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP]:
        return 'UP'
    if keys[pygame.K_DOWN]:
        return 'DOWN'
    if keys[pygame.K_LEFT]:
        return 'LEFT'
    if keys[pygame.K_RIGHT]:
        return 'RIGHT'
    return None


def main():
    """
    Основной игровой цикл.
    """
    pygame.init()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Змейка")

    clock = pygame.time.Clock()

    snake = Snake()
    apple = Apple()

    running = True
    while running:
        screen.fill(BACKGROUND_COLOR)

        # Обрабатываем события
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Обработка клавиш и обновление направления
        direction = handle_keys()
        if direction:
            snake.update_direction(direction)

        # Двигаем змейку
        snake.move()

        # Проверка на столкновение змейки с яблоком
        if snake.get_head_position() == apple.position:
            snake.eat()
            apple.randomize_position()

        # Отрисовываем яблоко и змейку
        apple.draw(screen)
        snake.draw(screen)

        pygame.display.update()
        clock.tick(10)  # Ограничиваем частоту кадров, чтобы змейка не двигалась слишком быстро

    pygame.quit()


if __name__ == "__main__":
    main()
