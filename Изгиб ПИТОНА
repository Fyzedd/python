import pygame
import random

# Настройки игры
SCREEN_WIDTH = 640
SCREEN_HEIGHT = 480
GRID_SIZE = 20
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)


class GameObject:
    """Базовый класс для всех игровых объектов."""

    def __init__(self, x, y, body_color):
        """Инициализация объекта с координатами и цветом.
        
        Args:
            x (int): координата X объекта.
            y (int): координата Y объекта.
            body_color (tuple): цвет объекта в формате RGB.
        """
        self.position = (x, y)
        self.body_color = body_color

    def draw(self, surface):
        """Отрисовывает объект на экране.
        
        Args:
            surface (pygame.Surface): поверхность, на которой будет отрисован объект.
        """
        pygame.draw.rect(surface, self.body_color, pygame.Rect(
            self.position[0], self.position[1], GRID_SIZE, GRID_SIZE))


class Apple(GameObject):
    """Класс яблока, которое змейка должна съесть."""

    def __init__(self):
        """Инициализация яблока и случайное определение его позиции."""
        self.randomize_position()
        super().__init__(self.position[0], self.position[1], RED)

    def randomize_position(self):
        """Устанавливает случайные координаты яблока на игровом поле."""
        x = random.randint(0, (SCREEN_WIDTH // GRID_SIZE) - 1) * GRID_SIZE
        y = random.randint(0, (SCREEN_HEIGHT // GRID_SIZE) - 1) * GRID_SIZE
        self.position = (x, y)


class Snake(GameObject):
    """Класс змейки, управляющейся игроком."""

    def __init__(self):
        """Инициализация змейки с начальной позицией и направлением."""
        self.body_color = GREEN
        self.length = 1
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]  # начальная позиция змейки
        self.direction = (GRID_SIZE, 0)  # начальное направление вправо
        self.next_direction = (GRID_SIZE, 0)

    def update_direction(self, direction):
        """Обновляет следующее направление движения змейки.
        
        Args:
            direction (tuple): новое направление в формате (dx, dy).
        """
        self.next_direction = direction

    def move(self):
        """Обновляет позицию змейки и добавляет новый сегмент головы."""
        head_x, head_y = self.get_head_position()
        new_head = (head_x + self.next_direction[0], head_y + self.next_direction[1])

        # Столкновение с границей (переход через край)
        new_head = ((new_head[0] + SCREEN_WIDTH) % SCREEN_WIDTH,
                    (new_head[1] + SCREEN_HEIGHT) % SCREEN_HEIGHT)

        self.positions.insert(0, new_head)

        if len(self.positions) > self.length:
            self.positions.pop()

    def get_head_position(self):
        """Возвращает позицию головы змейки."""
        return self.positions[0]

    def reset(self):
        """Сбрасывает змейку в начальное состояние после столкновения."""
        self.length = 1
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]
        self.direction = (GRID_SIZE, 0)
        self.next_direction = (GRID_SIZE, 0)


def handle_keys(snake):
    """Обрабатывает нажатия клавиш для изменения направления змейки.
    
    Args:
        snake (Snake): экземпляр змейки, для которой меняется направление.
    """
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP and snake.direction != (0, GRID_SIZE):
                snake.update_direction((0, -GRID_SIZE))
            elif event.key == pygame.K_DOWN and snake.direction != (0, -GRID_SIZE):
                snake.update_direction((0, GRID_SIZE))
            elif event.key == pygame.K_LEFT and snake.direction != (GRID_SIZE, 0):
                snake.update_direction((-GRID_SIZE, 0))
            elif event.key == pygame.K_RIGHT and snake.direction != (-GRID_SIZE, 0):
                snake.update_direction((GRID_SIZE, 0))


def main():
    """Основной игровой цикл."""
    pygame.init()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Змейка")
    clock = pygame.time.Clock()

    snake = Snake()
    apple = Apple()

    while True:
        handle_keys(snake)
        snake.move()

        # Проверка, съела ли змейка яблоко
        if snake.get_head_position() == apple.position:
            snake.length += 1
            apple.randomize_position()

        screen.fill(BLACK)
        snake.draw(screen)
        apple.draw(screen)

        pygame.display.update()
        clock.tick(15)  # Ограничение на 15 кадров в секунду


if __name__ == "__main__":
    main()
